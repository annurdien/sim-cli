name: Release Pipeline

on:
  push:
    branches: [ main ]

jobs:
  check-release:
    name: Check Release Trigger
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check if commit message contains 'release:'
      id: check
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if [[ "$COMMIT_MSG" == *"release:"* ]]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "Release commit detected: $COMMIT_MSG"
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "Not a release commit: $COMMIT_MSG"
        fi

  release:
    name: Release
    runs-on: ${{ matrix.os }}
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.x

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

    - name: Run tests
      run: go test ./...

    - name: Build application
      run: make build

    - name: Build for multiple platforms
      run: make build-all

    - name: Create checksums (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sim-cli-binaries-${{ matrix.os }}
        path: |
          dist/
          
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-release, release]
    if: needs.check-release.outputs.should-release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Prepare release files
      run: |
        mkdir -p release-files
        # Copy binaries from Linux build
        cp artifacts/sim-cli-binaries-ubuntu-latest/dist/* release-files/ 2>/dev/null || true
        # Copy binaries from macOS build (if different)
        cp artifacts/sim-cli-binaries-macos-latest/dist/* release-files/ 2>/dev/null || true
        ls -la release-files/
        
    - name: Extract version from commit message
      id: version
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        VERSION=$(echo "$COMMIT_MSG" | grep -o 'release:[[:space:]]*v[0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/release:[[:space:]]*//' || echo "v$(date +%Y%m%d-%H%M%S)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          Release created from commit: ${{ github.sha }}
          
          ## Changes
          ${{ github.event.head_commit.message }}
          
          ## Downloads
          - `sim-darwin-amd64`: macOS Intel
          - `sim-darwin-arm64`: macOS Apple Silicon  
          - `sim-linux-amd64`: Linux x64
        files: |
          release-files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
